// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "instrumentpanel.h"

/////////////////////////////////////////////////////////////////////////////
// CInstrumentPanel

IMPLEMENT_DYNCREATE(CInstrumentPanel, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CInstrumentPanel properties

OLE_COLOR CInstrumentPanel::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CInstrumentPanel::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_COLOR CInstrumentPanel::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CInstrumentPanel::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CInstrumentPanel::GetFyDeg()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CInstrumentPanel::SetFyDeg(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

short CInstrumentPanel::GetGzDeg()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CInstrumentPanel::SetGzDeg(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

short CInstrumentPanel::GetDirection()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CInstrumentPanel::SetDirection(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

short CInstrumentPanel::GetApHeight()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CInstrumentPanel::SetApHeight(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

short CInstrumentPanel::GetAimHeight()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CInstrumentPanel::SetAimHeight(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

short CInstrumentPanel::GetAirSpeed()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CInstrumentPanel::SetAirSpeed(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

short CInstrumentPanel::GetAimAirSpeed()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CInstrumentPanel::SetAimAirSpeed(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

short CInstrumentPanel::GetAimDirection()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CInstrumentPanel::SetAimDirection(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

float CInstrumentPanel::GetHeading()
{
	float result;
	GetProperty(0x9, VT_R4, (void*)&result);
	return result;
}

void CInstrumentPanel::SetHeading(float propVal)
{
	SetProperty(0x9, VT_R4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CInstrumentPanel operations

void CInstrumentPanel::UpDate(short GzDeg, short FyDeg, short Direction, short AimDirection, short AirSpeed, short AimAirSpeed, short ApHeight, short AimHeight, float Heading)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_R4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 GzDeg, FyDeg, Direction, AimDirection, AirSpeed, AimAirSpeed, ApHeight, AimHeight, Heading);
}

void CInstrumentPanel::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
