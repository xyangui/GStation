// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "instrumentcircle.h"

/////////////////////////////////////////////////////////////////////////////
// CInstrumentCircle

IMPLEMENT_DYNCREATE(CInstrumentCircle, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CInstrumentCircle properties

short CInstrumentCircle::GetMimDeg()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CInstrumentCircle::SetMimDeg(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

short CInstrumentCircle::GetMaxDeg()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CInstrumentCircle::SetMaxDeg(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

short CInstrumentCircle::GetMinValue()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CInstrumentCircle::SetMinValue(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

short CInstrumentCircle::GetMaxValue()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CInstrumentCircle::SetMaxValue(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

short CInstrumentCircle::GetDivCount()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CInstrumentCircle::SetDivCount(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

double CInstrumentCircle::GetRealValue()
{
	double result;
	GetProperty(0x6, VT_R8, (void*)&result);
	return result;
}

void CInstrumentCircle::SetRealValue(double propVal)
{
	SetProperty(0x6, VT_R8, propVal);
}

double CInstrumentCircle::GetAimValue()
{
	double result;
	GetProperty(0x7, VT_R8, (void*)&result);
	return result;
}

void CInstrumentCircle::SetAimValue(double propVal)
{
	SetProperty(0x7, VT_R8, propVal);
}

double CInstrumentCircle::GetNumberFont()
{
	double result;
	GetProperty(0x8, VT_R8, (void*)&result);
	return result;
}

void CInstrumentCircle::SetNumberFont(double propVal)
{
	SetProperty(0x8, VT_R8, propVal);
}

double CInstrumentCircle::GetLabFont()
{
	double result;
	GetProperty(0x9, VT_R8, (void*)&result);
	return result;
}

void CInstrumentCircle::SetLabFont(double propVal)
{
	SetProperty(0x9, VT_R8, propVal);
}

long CInstrumentCircle::GetLabX()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CInstrumentCircle::SetLabX(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

long CInstrumentCircle::GetLabY()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CInstrumentCircle::SetLabY(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

CString CInstrumentCircle::GetLabText()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void CInstrumentCircle::SetLabText(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

CString CInstrumentCircle::GetLabTextLine2()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CInstrumentCircle::SetLabTextLine2(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

long CInstrumentCircle::GetLabX2()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CInstrumentCircle::SetLabX2(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

long CInstrumentCircle::GetLabY2()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CInstrumentCircle::SetLabY2(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CInstrumentCircle operations
