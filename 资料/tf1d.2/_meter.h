#if !defined(AFX__METER_H__6619B82C_F69C_4C65_850A_71D81D56CB11__INCLUDED_)
#define AFX__METER_H__6619B82C_F69C_4C65_850A_71D81D56CB11__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CPicture;
class COleFont;

/////////////////////////////////////////////////////////////////////////////
// C_Meter wrapper class

class C_Meter : public CWnd
{
protected:
	DECLARE_DYNCREATE(C_Meter)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x6adfd246, 0x1aaa, 0x11d4, { 0xa9, 0xac, 0xb7, 0x61, 0xe1, 0xff, 0xb4, 0x7a } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	void ShowAbout();
	long LoadFromLibrary(LPCTSTR Description);
	void RefreshStatic();
	void RefreshDynamic();
	BOOL GetAutoRedraw();
	void SetAutoRedraw(BOOL bNewValue);
	unsigned long GetBackColor();
	void SetBackColor(unsigned long newValue);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	CPicture GetMouseIcon();
	void SetRefMouseIcon(LPDISPATCH newValue);
	long GetMousePointer();
	void SetMousePointer(long nNewValue);
	long GetBorderWidth();
	void SetBorderWidth(long nNewValue);
	unsigned long GetBorderColor();
	void SetBorderColor(unsigned long newValue);
	long GetOutLineStyle();
	void SetOutLineStyle(long nNewValue);
	long GetInLineStyle();
	void SetInLineStyle(long nNewValue);
	unsigned long GetBorderLight();
	void SetBorderLight(unsigned long newValue);
	unsigned long GetBorderShadow();
	void SetBorderShadow(unsigned long newValue);
	long GetOutLineWidth();
	void SetOutLineWidth(long nNewValue);
	long GetInLineWidth();
	void SetInLineWidth(long nNewValue);
	CPicture GetBackPicture();
	void SetRefBackPicture(LPDISPATCH newValue);
	long GetHandNum();
	void SetHandNum(long nNewValue);
	double GetHandValue();
	void SetHandValue(double newValue);
	long GetHandID();
	void SetHandID(long nNewValue);
	void SetHandPanelID(long nNewValue);
	long GetHandPanelID();
	void SetHandColor(unsigned long newValue);
	unsigned long GetHandColor();
	void SetHandStyle(long nNewValue);
	long GetHandStyle();
	void SetHandWidth(long nNewValue);
	long GetHandWidth();
	void SetHandRadius(double newValue);
	double GetHandRadius();
	void SetHandShadow(unsigned long newValue);
	unsigned long GetHandShadow();
	void SetHandMouseControl(long nNewValue);
	long GetHandMouseControl();
	void SetHandDigitalDecimals(long nNewValue);
	long GetHandDigitalDecimals();
	void SetHandDigitalColor(unsigned long newValue);
	unsigned long GetHandDigitalColor();
	void SetHandDigitalX(double newValue);
	double GetHandDigitalX();
	void SetHandDigitalFontID(long nNewValue);
	long GetHandDigitalFontID();
	double GetHandDigitalY();
	void SetHandDigitalY(double newValue);
	BOOL GetHandDigitalVisible();
	void SetHandDigitalVisible(BOOL bNewValue);
	long GetPanelNum();
	void SetPanelNum(long nNewValue);
	long GetPanelID();
	void SetPanelID(long nNewValue);
	void SetRefPanelPicture(LPDISPATCH newValue);
	CPicture GetPanelPicture();
	void SetPanelColor(unsigned long newValue);
	unsigned long GetPanelColor();
	double GetPanelOriginX();
	void SetPanelOriginX(double newValue);
	double GetPanelOriginY();
	void SetPanelOriginY(double newValue);
	long GetPanelBorderWidth();
	void SetPanelBorderWidth(long nNewValue);
	long GetPanelBorderStyle();
	void SetPanelBorderStyle(long nNewValue);
	double GetPanelStartAngle();
	void SetPanelStartAngle(double newValue);
	double GetPanelEndAngle();
	void SetPanelEndAngle(double newValue);
	double GetPanelBorderLight();
	void SetPanelBorderLight(double newValue);
	long GetPanelDirection();
	void SetPanelDirection(long nNewValue);
	double GetPanelMin();
	void SetPanelMin(double newValue);
	double GetPanelMax();
	void SetPanelMax(double newValue);
	unsigned long GetPanelBorderColor();
	void SetPanelBorderColor(unsigned long newValue);
	double GetPanelRadius();
	void SetPanelRadius(double newValue);
	long GetPanelStyle();
	void SetPanelStyle(long nNewValue);
	long GetTicNum();
	void SetTicNum(long nNewValue);
	long GetTicID();
	void SetTicID(long nNewValue);
	void SetTicPanelID(long nNewValue);
	long GetTicPanelID();
	void SetTicLineNum(long nNewValue);
	long GetTicLineNum();
	void SetTicLineWidth(long nNewValue);
	long GetTicLineWidth();
	void SetTicLineLength(long nNewValue);
	long GetTicLineLength();
	void SetTicNumberColor(unsigned long newValue);
	unsigned long GetTicNumberColor();
	void SetTicNumberFontID(long nNewValue);
	long GetTicNumberFontID();
	void SetTicNumerical(BOOL bNewValue);
	BOOL GetTicNumerical();
	void SetTicLineRadius(double newValue);
	double GetTicLineRadius();
	void SetTicNumberRadius(double newValue);
	double GetTicNumberRadius();
	void SetTicLineColor(unsigned long newValue);
	unsigned long GetTicLineColor();
	void SetTicMaxNumber(double newValue);
	double GetTicMaxNumber();
	void SetTicMinNumber(double newValue);
	double GetTicMinNumber();
	void SetTicNumberFormat(LPCTSTR lpszNewValue);
	CString GetTicNumberFormat();
	void SetTicLineStyle(long nNewValue);
	long GetTicLineStyle();
	void SetTicEndAngle(double newValue);
	double GetTicEndAngle();
	void SetTicStartAngle(double newValue);
	double GetTicStartAngle();
	long GetAnnularNum();
	void SetAnnularNum(long nNewValue);
	long GetAnnularID();
	void SetAnnularID(long nNewValue);
	long GetAnnularPanelID();
	void SetAnnularPanelID(long nNewValue);
	void SetAnnularOuter(double newValue);
	double GetAnnularOuter();
	void SetAnnularInner(double newValue);
	double GetAnnularInner();
	void SetAnnularEndAngle(double newValue);
	double GetAnnularEndAngle();
	void SetAnnularStartAngle(double newValue);
	double GetAnnularStartAngle();
	void SetAnnularColor(unsigned long newValue);
	unsigned long GetAnnularColor();
	long GetCaptionNum();
	void SetCaptionNum(long nNewValue);
	long GetCaptionID();
	void SetCaptionID(long nNewValue);
	CString GetCaptionText();
	void SetCaptionText(LPCTSTR lpszNewValue);
	unsigned long GetCaptionColor();
	void SetCaptionColor(unsigned long newValue);
	long GetCaptionFontID();
	void SetCaptionFontID(long nNewValue);
	double GetCaptionX();
	void SetCaptionX(double newValue);
	double GetCaptionY();
	void SetCaptionY(double newValue);
	double GetCaptionAngle();
	void SetCaptionAngle(double newValue);
	long GetFontNum();
	void SetFontNum(long nNewValue);
	long GetFontID();
	void SetFontID(long nNewValue);
	COleFont GetFont();
	void SetRefFont(LPDISPATCH newValue);
	long GetHWnd();
	long GetHDC();
	CPicture GetImage();
	CString GetLibraryDescription();
	void SetLibraryDescription(LPCTSTR lpszNewValue);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX__METER_H__6619B82C_F69C_4C65_850A_71D81D56CB11__INCLUDED_)
